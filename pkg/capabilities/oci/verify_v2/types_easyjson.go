// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package verify_v2

import (
	json "encoding/json"
	oci "github.com/kubewarden/policy-sdk-go/pkg/capabilities/oci"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson6601e8cdDecodeGithubComKubewardenPolicySdkGoPkgCapabilitiesOciVerifyV2(in *jlexer.Lexer, out *sigstorePubKeysVerify) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "type":
			easyjson6601e8cdDecodeGithubComKubewardenPolicySdkGoPkgCapabilitiesOciVerifyV21(in, &out.Type)
		case "image":
			out.Image = string(in.String())
		case "pub_keys":
			if in.IsNull() {
				in.Skip()
				out.PubKeys = nil
			} else {
				in.Delim('[')
				if out.PubKeys == nil {
					if !in.IsDelim(']') {
						out.PubKeys = make([]string, 0, 4)
					} else {
						out.PubKeys = []string{}
					}
				} else {
					out.PubKeys = (out.PubKeys)[:0]
				}
				for !in.IsDelim(']') {
					var v1 string
					v1 = string(in.String())
					out.PubKeys = append(out.PubKeys, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "annotations":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				out.Annotations = make(map[string]string)
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v2 string
					v2 = string(in.String())
					(out.Annotations)[key] = v2
					in.WantComma()
				}
				in.Delim('}')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeGithubComKubewardenPolicySdkGoPkgCapabilitiesOciVerifyV2(out *jwriter.Writer, in sigstorePubKeysVerify) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"type\":"
		out.RawString(prefix[1:])
		(in.Type).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"image\":"
		out.RawString(prefix)
		out.String(string(in.Image))
	}
	{
		const prefix string = ",\"pub_keys\":"
		out.RawString(prefix)
		if in.PubKeys == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v3, v4 := range in.PubKeys {
				if v3 > 0 {
					out.RawByte(',')
				}
				out.String(string(v4))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"annotations\":"
		out.RawString(prefix)
		if in.Annotations == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v5First := true
			for v5Name, v5Value := range in.Annotations {
				if v5First {
					v5First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v5Name))
				out.RawByte(':')
				out.String(string(v5Value))
			}
			out.RawByte('}')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v sigstorePubKeysVerify) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6601e8cdEncodeGithubComKubewardenPolicySdkGoPkgCapabilitiesOciVerifyV2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v sigstorePubKeysVerify) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6601e8cdEncodeGithubComKubewardenPolicySdkGoPkgCapabilitiesOciVerifyV2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *sigstorePubKeysVerify) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6601e8cdDecodeGithubComKubewardenPolicySdkGoPkgCapabilitiesOciVerifyV2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *sigstorePubKeysVerify) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6601e8cdDecodeGithubComKubewardenPolicySdkGoPkgCapabilitiesOciVerifyV2(l, v)
}
func easyjson6601e8cdDecodeGithubComKubewardenPolicySdkGoPkgCapabilitiesOciVerifyV21(in *jlexer.Lexer, out *SigstorePubKeyVerifyType) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeGithubComKubewardenPolicySdkGoPkgCapabilitiesOciVerifyV21(out *jwriter.Writer, in SigstorePubKeyVerifyType) {
	out.RawByte('{')
	first := true
	_ = first
	out.RawByte('}')
}
func easyjson6601e8cdDecodeGithubComKubewardenPolicySdkGoPkgCapabilitiesOciVerifyV22(in *jlexer.Lexer, out *sigstoreKeylessVerifyExact) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "type":
			easyjson6601e8cdDecodeGithubComKubewardenPolicySdkGoPkgCapabilitiesOciVerifyV23(in, &out.Type)
		case "image":
			out.Image = string(in.String())
		case "keyless":
			if in.IsNull() {
				in.Skip()
				out.Keyless = nil
			} else {
				in.Delim('[')
				if out.Keyless == nil {
					if !in.IsDelim(']') {
						out.Keyless = make([]oci.KeylessInfo, 0, 2)
					} else {
						out.Keyless = []oci.KeylessInfo{}
					}
				} else {
					out.Keyless = (out.Keyless)[:0]
				}
				for !in.IsDelim(']') {
					var v6 oci.KeylessInfo
					(v6).UnmarshalEasyJSON(in)
					out.Keyless = append(out.Keyless, v6)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "annotations":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				out.Annotations = make(map[string]string)
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v7 string
					v7 = string(in.String())
					(out.Annotations)[key] = v7
					in.WantComma()
				}
				in.Delim('}')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeGithubComKubewardenPolicySdkGoPkgCapabilitiesOciVerifyV22(out *jwriter.Writer, in sigstoreKeylessVerifyExact) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"type\":"
		out.RawString(prefix[1:])
		(in.Type).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"image\":"
		out.RawString(prefix)
		out.String(string(in.Image))
	}
	{
		const prefix string = ",\"keyless\":"
		out.RawString(prefix)
		if in.Keyless == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v8, v9 := range in.Keyless {
				if v8 > 0 {
					out.RawByte(',')
				}
				(v9).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"annotations\":"
		out.RawString(prefix)
		if in.Annotations == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v10First := true
			for v10Name, v10Value := range in.Annotations {
				if v10First {
					v10First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v10Name))
				out.RawByte(':')
				out.String(string(v10Value))
			}
			out.RawByte('}')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v sigstoreKeylessVerifyExact) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6601e8cdEncodeGithubComKubewardenPolicySdkGoPkgCapabilitiesOciVerifyV22(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v sigstoreKeylessVerifyExact) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6601e8cdEncodeGithubComKubewardenPolicySdkGoPkgCapabilitiesOciVerifyV22(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *sigstoreKeylessVerifyExact) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6601e8cdDecodeGithubComKubewardenPolicySdkGoPkgCapabilitiesOciVerifyV22(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *sigstoreKeylessVerifyExact) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6601e8cdDecodeGithubComKubewardenPolicySdkGoPkgCapabilitiesOciVerifyV22(l, v)
}
func easyjson6601e8cdDecodeGithubComKubewardenPolicySdkGoPkgCapabilitiesOciVerifyV23(in *jlexer.Lexer, out *SigstoreKeylessVerifyType) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeGithubComKubewardenPolicySdkGoPkgCapabilitiesOciVerifyV23(out *jwriter.Writer, in SigstoreKeylessVerifyType) {
	out.RawByte('{')
	first := true
	_ = first
	out.RawByte('}')
}
func easyjson6601e8cdDecodeGithubComKubewardenPolicySdkGoPkgCapabilitiesOciVerifyV24(in *jlexer.Lexer, out *sigstoreKeylessPrefixVerify) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "type":
			easyjson6601e8cdDecodeGithubComKubewardenPolicySdkGoPkgCapabilitiesOciVerifyV25(in, &out.Type)
		case "image":
			out.Image = string(in.String())
		case "keyless_prefix":
			if in.IsNull() {
				in.Skip()
				out.KeylessPrefix = nil
			} else {
				in.Delim('[')
				if out.KeylessPrefix == nil {
					if !in.IsDelim(']') {
						out.KeylessPrefix = make([]KeylessPrefixInfo, 0, 2)
					} else {
						out.KeylessPrefix = []KeylessPrefixInfo{}
					}
				} else {
					out.KeylessPrefix = (out.KeylessPrefix)[:0]
				}
				for !in.IsDelim(']') {
					var v11 KeylessPrefixInfo
					(v11).UnmarshalEasyJSON(in)
					out.KeylessPrefix = append(out.KeylessPrefix, v11)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "annotations":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				out.Annotations = make(map[string]string)
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v12 string
					v12 = string(in.String())
					(out.Annotations)[key] = v12
					in.WantComma()
				}
				in.Delim('}')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeGithubComKubewardenPolicySdkGoPkgCapabilitiesOciVerifyV24(out *jwriter.Writer, in sigstoreKeylessPrefixVerify) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"type\":"
		out.RawString(prefix[1:])
		(in.Type).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"image\":"
		out.RawString(prefix)
		out.String(string(in.Image))
	}
	{
		const prefix string = ",\"keyless_prefix\":"
		out.RawString(prefix)
		if in.KeylessPrefix == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v13, v14 := range in.KeylessPrefix {
				if v13 > 0 {
					out.RawByte(',')
				}
				(v14).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"annotations\":"
		out.RawString(prefix)
		if in.Annotations == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v15First := true
			for v15Name, v15Value := range in.Annotations {
				if v15First {
					v15First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v15Name))
				out.RawByte(':')
				out.String(string(v15Value))
			}
			out.RawByte('}')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v sigstoreKeylessPrefixVerify) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6601e8cdEncodeGithubComKubewardenPolicySdkGoPkgCapabilitiesOciVerifyV24(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v sigstoreKeylessPrefixVerify) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6601e8cdEncodeGithubComKubewardenPolicySdkGoPkgCapabilitiesOciVerifyV24(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *sigstoreKeylessPrefixVerify) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6601e8cdDecodeGithubComKubewardenPolicySdkGoPkgCapabilitiesOciVerifyV24(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *sigstoreKeylessPrefixVerify) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6601e8cdDecodeGithubComKubewardenPolicySdkGoPkgCapabilitiesOciVerifyV24(l, v)
}
func easyjson6601e8cdDecodeGithubComKubewardenPolicySdkGoPkgCapabilitiesOciVerifyV25(in *jlexer.Lexer, out *SigstoreKeylessPrefixVerifyType) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeGithubComKubewardenPolicySdkGoPkgCapabilitiesOciVerifyV25(out *jwriter.Writer, in SigstoreKeylessPrefixVerifyType) {
	out.RawByte('{')
	first := true
	_ = first
	out.RawByte('}')
}
func easyjson6601e8cdDecodeGithubComKubewardenPolicySdkGoPkgCapabilitiesOciVerifyV26(in *jlexer.Lexer, out *sigstoreGithubActionsVerify) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "type":
			easyjson6601e8cdDecodeGithubComKubewardenPolicySdkGoPkgCapabilitiesOciVerifyV27(in, &out.Type)
		case "image":
			out.Image = string(in.String())
		case "owner":
			out.Owner = string(in.String())
		case "repo":
			out.Repo = string(in.String())
		case "annotations":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				out.Annotations = make(map[string]string)
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v16 string
					v16 = string(in.String())
					(out.Annotations)[key] = v16
					in.WantComma()
				}
				in.Delim('}')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeGithubComKubewardenPolicySdkGoPkgCapabilitiesOciVerifyV26(out *jwriter.Writer, in sigstoreGithubActionsVerify) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"type\":"
		out.RawString(prefix[1:])
		(in.Type).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"image\":"
		out.RawString(prefix)
		out.String(string(in.Image))
	}
	{
		const prefix string = ",\"owner\":"
		out.RawString(prefix)
		out.String(string(in.Owner))
	}
	{
		const prefix string = ",\"repo\":"
		out.RawString(prefix)
		out.String(string(in.Repo))
	}
	{
		const prefix string = ",\"annotations\":"
		out.RawString(prefix)
		if in.Annotations == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v17First := true
			for v17Name, v17Value := range in.Annotations {
				if v17First {
					v17First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v17Name))
				out.RawByte(':')
				out.String(string(v17Value))
			}
			out.RawByte('}')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v sigstoreGithubActionsVerify) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6601e8cdEncodeGithubComKubewardenPolicySdkGoPkgCapabilitiesOciVerifyV26(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v sigstoreGithubActionsVerify) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6601e8cdEncodeGithubComKubewardenPolicySdkGoPkgCapabilitiesOciVerifyV26(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *sigstoreGithubActionsVerify) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6601e8cdDecodeGithubComKubewardenPolicySdkGoPkgCapabilitiesOciVerifyV26(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *sigstoreGithubActionsVerify) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6601e8cdDecodeGithubComKubewardenPolicySdkGoPkgCapabilitiesOciVerifyV26(l, v)
}
func easyjson6601e8cdDecodeGithubComKubewardenPolicySdkGoPkgCapabilitiesOciVerifyV27(in *jlexer.Lexer, out *SigstoreGithubActionsVerifyType) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeGithubComKubewardenPolicySdkGoPkgCapabilitiesOciVerifyV27(out *jwriter.Writer, in SigstoreGithubActionsVerifyType) {
	out.RawByte('{')
	first := true
	_ = first
	out.RawByte('}')
}
func easyjson6601e8cdDecodeGithubComKubewardenPolicySdkGoPkgCapabilitiesOciVerifyV28(in *jlexer.Lexer, out *sigstoreCertificateVerify) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "type":
			easyjson6601e8cdDecodeGithubComKubewardenPolicySdkGoPkgCapabilitiesOciVerifyV29(in, &out.Type)
		case "image":
			out.Image = string(in.String())
		case "certificate":
			if in.IsNull() {
				in.Skip()
				out.Certificate = nil
			} else {
				in.Delim('[')
				if out.Certificate == nil {
					if !in.IsDelim(']') {
						out.Certificate = make([]int32, 0, 16)
					} else {
						out.Certificate = []int32{}
					}
				} else {
					out.Certificate = (out.Certificate)[:0]
				}
				for !in.IsDelim(']') {
					var v18 int32
					v18 = int32(in.Int32())
					out.Certificate = append(out.Certificate, v18)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "certificate_chain":
			if in.IsNull() {
				in.Skip()
				out.CertificateChain = nil
			} else {
				in.Delim('[')
				if out.CertificateChain == nil {
					if !in.IsDelim(']') {
						out.CertificateChain = make([][]int32, 0, 2)
					} else {
						out.CertificateChain = [][]int32{}
					}
				} else {
					out.CertificateChain = (out.CertificateChain)[:0]
				}
				for !in.IsDelim(']') {
					var v19 []int32
					if in.IsNull() {
						in.Skip()
						v19 = nil
					} else {
						in.Delim('[')
						if v19 == nil {
							if !in.IsDelim(']') {
								v19 = make([]int32, 0, 16)
							} else {
								v19 = []int32{}
							}
						} else {
							v19 = (v19)[:0]
						}
						for !in.IsDelim(']') {
							var v20 int32
							v20 = int32(in.Int32())
							v19 = append(v19, v20)
							in.WantComma()
						}
						in.Delim(']')
					}
					out.CertificateChain = append(out.CertificateChain, v19)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "require_rekor_bundle":
			out.RequireRekorBundle = bool(in.Bool())
		case "annotations":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				out.Annotations = make(map[string]string)
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v21 string
					v21 = string(in.String())
					(out.Annotations)[key] = v21
					in.WantComma()
				}
				in.Delim('}')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeGithubComKubewardenPolicySdkGoPkgCapabilitiesOciVerifyV28(out *jwriter.Writer, in sigstoreCertificateVerify) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"type\":"
		out.RawString(prefix[1:])
		(in.Type).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"image\":"
		out.RawString(prefix)
		out.String(string(in.Image))
	}
	{
		const prefix string = ",\"certificate\":"
		out.RawString(prefix)
		if in.Certificate == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v22, v23 := range in.Certificate {
				if v22 > 0 {
					out.RawByte(',')
				}
				out.Int32(int32(v23))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"certificate_chain\":"
		out.RawString(prefix)
		if in.CertificateChain == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v24, v25 := range in.CertificateChain {
				if v24 > 0 {
					out.RawByte(',')
				}
				if v25 == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
					out.RawString("null")
				} else {
					out.RawByte('[')
					for v26, v27 := range v25 {
						if v26 > 0 {
							out.RawByte(',')
						}
						out.Int32(int32(v27))
					}
					out.RawByte(']')
				}
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"require_rekor_bundle\":"
		out.RawString(prefix)
		out.Bool(bool(in.RequireRekorBundle))
	}
	{
		const prefix string = ",\"annotations\":"
		out.RawString(prefix)
		if in.Annotations == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v28First := true
			for v28Name, v28Value := range in.Annotations {
				if v28First {
					v28First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v28Name))
				out.RawByte(':')
				out.String(string(v28Value))
			}
			out.RawByte('}')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v sigstoreCertificateVerify) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6601e8cdEncodeGithubComKubewardenPolicySdkGoPkgCapabilitiesOciVerifyV28(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v sigstoreCertificateVerify) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6601e8cdEncodeGithubComKubewardenPolicySdkGoPkgCapabilitiesOciVerifyV28(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *sigstoreCertificateVerify) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6601e8cdDecodeGithubComKubewardenPolicySdkGoPkgCapabilitiesOciVerifyV28(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *sigstoreCertificateVerify) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6601e8cdDecodeGithubComKubewardenPolicySdkGoPkgCapabilitiesOciVerifyV28(l, v)
}
func easyjson6601e8cdDecodeGithubComKubewardenPolicySdkGoPkgCapabilitiesOciVerifyV29(in *jlexer.Lexer, out *SigstoreCertificateVerifyType) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeGithubComKubewardenPolicySdkGoPkgCapabilitiesOciVerifyV29(out *jwriter.Writer, in SigstoreCertificateVerifyType) {
	out.RawByte('{')
	first := true
	_ = first
	out.RawByte('}')
}
func easyjson6601e8cdDecodeGithubComKubewardenPolicySdkGoPkgCapabilitiesOciVerifyV210(in *jlexer.Lexer, out *KeylessPrefixInfo) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "issuer":
			out.Issuer = string(in.String())
		case "url_prefix":
			out.UrlPrefix = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeGithubComKubewardenPolicySdkGoPkgCapabilitiesOciVerifyV210(out *jwriter.Writer, in KeylessPrefixInfo) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"issuer\":"
		out.RawString(prefix[1:])
		out.String(string(in.Issuer))
	}
	{
		const prefix string = ",\"url_prefix\":"
		out.RawString(prefix)
		out.String(string(in.UrlPrefix))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v KeylessPrefixInfo) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6601e8cdEncodeGithubComKubewardenPolicySdkGoPkgCapabilitiesOciVerifyV210(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v KeylessPrefixInfo) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6601e8cdEncodeGithubComKubewardenPolicySdkGoPkgCapabilitiesOciVerifyV210(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *KeylessPrefixInfo) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6601e8cdDecodeGithubComKubewardenPolicySdkGoPkgCapabilitiesOciVerifyV210(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *KeylessPrefixInfo) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6601e8cdDecodeGithubComKubewardenPolicySdkGoPkgCapabilitiesOciVerifyV210(l, v)
}
